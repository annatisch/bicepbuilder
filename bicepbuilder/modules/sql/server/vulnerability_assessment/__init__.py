from typing import TYPE_CHECKING, IO, TypedDict, Literal, List, Dict, Union, Optional
from typing_extensions import Required

from .....expressions import (
    BicepExpression,
    Module,
    ResourceId,
    ResourceName,
    Deployment,
    Output,
)


class RecurringScan(TypedDict, total=False):
    """The recurring scans settings."""
    emails: Required[List[object]]
    """Specifies an array of e-mail addresses to which the scan notification is sent."""
    emailSubscriptionAdmins: bool
    """Specifies that the schedule scan notification will be sent to the subscription administrators."""
    isEnabled: bool
    """Recurring scans state."""


class VulnerabilityAssessment(TypedDict, total=False):
    """"""
    name: Required[str]
    """The name of the vulnerability assessment."""
    storageAccountResourceId: Required[str]
    """A blob storage to hold the scan results."""
    createStorageRoleAssignment: bool
    """Create the Storage Blob Data Contributor role assignment on the storage account. Note, the role assignment must not already exist on the storage account."""
    recurringScans: 'RecurringScan'
    """The recurring scans settings."""
    useStorageAccountAccessKey: bool
    """Use Access Key to access the storage account. The storage account cannot be behind a firewall or virtual network. If an access key is not used, the SQL Server system assigned managed identity must be assigned the Storage Blob Data Contributor role on the storage account."""


class VulnerabilityAssessmentOutputs(TypedDict, total=False):
    """Outputs for VulnerabilityAssessment"""
    name: Output[Literal['string']]
    """The name of the deployed vulnerability assessment."""
    resourceGroupName: Output[Literal['string']]
    """The resource group of the deployed vulnerability assessment."""
    resourceId: Output[Literal['string']]
    """The resource ID of the deployed vulnerability assessment."""


class VulnerabilityAssessmentBicep(Module):
    outputs: VulnerabilityAssessmentOutputs

