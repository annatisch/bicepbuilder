from typing import TYPE_CHECKING, TypedDict, Literal, List, Dict, Union
from typing_extensions import Required

from .....expressions import (
    BicepExpression,
    Module,
    Output,
)


class CompressionSetting(TypedDict, total=False):
    """Compression settings."""
    contentTypesToCompress: Required[List[object]]
    """List of content types on which compression applies. The value should be a valid MIME type."""
    iscontentTypeToCompressAll: bool
    """Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB."""


class CacheConfiguration(TypedDict, total=False):
    """The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."""
    compressionSettings: Required['CompressionSetting']
    """Compression settings."""
    queryParameters: Required[str]
    """Query parameters to include or exclude (comma separated)."""
    queryStringCachingBehavior: Required[Literal['IgnoreQueryString', 'IgnoreSpecifiedQueryStrings', 'IncludeSpecifiedQueryStrings', 'UseQueryString']]
    """Defines how Frontdoor caches requests that include query strings."""


class Route(TypedDict, total=False):
    """The list of routes for this AFD Endpoint."""
    name: Required[str]
    """The name of the route."""
    originGroupName: Required[str]
    """The name of the origin group."""
    cacheConfiguration: 'CacheConfiguration'
    """The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."""
    customDomainNames: List[object]
    """The names of the custom domains."""
    enabledState: Literal['Disabled', 'Enabled']
    """Whether to enable use of this rule."""
    forwardingProtocol: Literal['HttpOnly', 'HttpsOnly', 'MatchRequest']
    """The protocol this rule will use when forwarding traffic to backends."""
    httpsRedirect: Literal['Disabled', 'Enabled']
    """Whether to automatically redirect HTTP traffic to HTTPS traffic."""
    linkToDefaultDomain: Literal['Disabled', 'Enabled']
    """Whether this route will be linked to the default endpoint domain."""
    originPath: str
    """A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."""
    patternsToMatch: List[object]
    """The route patterns of the rule."""
    ruleSets: List[object]
    """The rule sets of the rule."""
    supportedProtocols: List[object]
    """The supported protocols of the rule."""


class Afdendpoint(TypedDict, total=False):
    """"""
    name: Required[str]
    """The name of the AFD Endpoint."""
    autoGeneratedDomainNameLabelScope: Literal['NoReuse', 'ResourceGroupReuse', 'SubscriptionReuse', 'TenantReuse']
    """Indicates the endpoint name reuse scope. The default value is TenantReuse."""
    enabledState: Literal['Disabled', 'Enabled']
    """Indicates whether the AFD Endpoint is enabled. The default value is Enabled."""
    location: str
    """The location of the AFD Endpoint."""
    routes: List['Route']
    """The list of routes for this AFD Endpoint."""
    tags: Dict[str, object]
    """The tags of the AFD Endpoint."""


class AfdendpointOutputs(TypedDict, total=False):
    """Outputs for Afdendpoint"""
    location: Output[Literal['string']]
    """The location the resource was deployed into."""
    name: Output[Literal['string']]
    """The name of the AFD Endpoint."""
    resourceGroupName: Output[Literal['string']]
    """The name of the resource group the endpoint was created in."""
    resourceId: Output[Literal['string']]
    """The resource id of the AFD Endpoint."""
    routes: Output[Literal['array']]
    """The list of routes assigned to the AFD endpoint."""


class AfdendpointModule(Module):
    outputs: AfdendpointOutputs

